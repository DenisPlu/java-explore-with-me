{
	"info": {
		"_postman_id": "d68e9270-29b8-414e-a4a5-805095136345",
		"name": "\"Explore with Me\" - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Создание пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта User: id, name, email\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('id');\r",
							"    pm.expect(body).to.have.property('name');\r",
							"    pm.expect(body).to.have.property('email');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"Harvey Hackett\",\r\n    \"email\": \"Layla79@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание категории события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта User: id, name, email\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('id');\r",
							"    pm.expect(body).to.have.property('name');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"robust4\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/admin/categories",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта User: id, name, email\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('id');\r",
							"    pm.expect(body).to.have.property('title');\r",
							"    pm.expect(body).to.have.property('description');\r",
							"    pm.expect(body).to.have.property('annotation');\r",
							"    pm.expect(body).to.have.property('category');    \r",
							"    pm.expect(body).to.have.property('eventDate');    \r",
							"    pm.expect(body).to.have.property('location');\r",
							"    pm.expect(body).to.have.property('views');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Minus sunt dolores id mollitia soluta repellendus deserunt pariatur autem.\",\r\n    \"description\": \"Dignissimos quo aliquid provident molestiae voluptas laudantium voluptatibus. Accusamus blanditiis minus laudantium illum nihil in dolorem illo. Eligendi cum impedit officia qui facilis quam et delectus tenetur. Vitae et praesentium corrupti ad sequi quia. Qui cum a explicabo similique esse. Id voluptas atque autem ut aut neque nisi illum quis.\\n \\rIn ullam sint quod quos doloribus et libero voluptas facere. Minima vero ut. Et quia ut omnis consequatur quasi mollitia repellendus a. Voluptatem laborum consectetur voluptas.\\n \\rVel ut non laborum neque ut et laudantium explicabo fugit. Harum doloribus recusandae sed. Culpa eos voluptate est.\",\r\n    \"annotation\": \"Nisi quod ex modi consequuntur vitae. Ea et iste tempore accusamus sit beatae aspernatur. Saepe iure aut.\",\r\n    \"category\": 1,\r\n    \"eventDate\": \"2025-04-12 05:22:23\",\r\n    \"location\": {\r\n        \"lat\": 86.4161,\r\n        \"lon\": -80.1961\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 679,\r\n    \"requestModeration\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1/events",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта Comment: text, created, updated, ...\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('text');\r",
							"    pm.expect(body).to.have.property('created');\r",
							"    pm.expect(body).to.have.property('updated');\r",
							"    pm.expect(body).to.have.property('eventTitle');\r",
							"    pm.expect(body).to.have.property('authorName');\r",
							"    pm.expect(body).to.have.property('status');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Comment text #1\",\r\n    \"eventId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1/comments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария повторно - ошибка 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код ошибки 409\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(409);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Comment text #1\",\r\n    \"eventId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1/comments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария пока он в статусе WAITING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта Comment: text, created, updated, ...\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('text');\r",
							"    pm.expect(body).to.have.property('created');\r",
							"    pm.expect(body).to.have.property('updated');\r",
							"    pm.expect(body).to.have.property('eventTitle');\r",
							"    pm.expect(body).to.have.property('authorName');\r",
							"    pm.expect(body).to.have.property('status');\r",
							"}); \r",
							"pm.test(\"Поле text должно быть обновлено и равно: Comment text updated\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.text).to.be.equals('Comment text updated');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Comment text updated\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1/comments/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"проверяем, что тело ответа является массивом\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).is.an('array');\r",
							"});\r",
							"pm.test(\"Ответ должен содержать поля объекта Comment: text, created, updated, ...\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body[0]).to.have.property('text');\r",
							"    pm.expect(body[0]).to.have.property('created');\r",
							"    pm.expect(body[0]).to.have.property('updated');\r",
							"    pm.expect(body[0]).to.have.property('eventTitle');\r",
							"    pm.expect(body[0]).to.have.property('authorName');\r",
							"    pm.expect(body[0]).to.have.property('status');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "localhost:8080/comments/user/1?from=0&size=1000",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"user",
						"1"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"проверяем, что тело ответа является массивом\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).is.an('array');\r",
							"});\r",
							"pm.test(\"Ответ должен содержать поля объекта Comment: text, created, updated, ...\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body[0]).to.have.property('text');\r",
							"    pm.expect(body[0]).to.have.property('created');\r",
							"    pm.expect(body[0]).to.have.property('updated');\r",
							"    pm.expect(body[0]).to.have.property('eventTitle');\r",
							"    pm.expect(body[0]).to.have.property('authorName');\r",
							"    pm.expect(body[0]).to.have.property('status');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "localhost:8080/comments/event/1?from=0&size=1000",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"event",
						"1"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание события 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта User: id, name, email\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('id');\r",
							"    pm.expect(body).to.have.property('title');\r",
							"    pm.expect(body).to.have.property('description');\r",
							"    pm.expect(body).to.have.property('annotation');\r",
							"    pm.expect(body).to.have.property('category');    \r",
							"    pm.expect(body).to.have.property('eventDate');    \r",
							"    pm.expect(body).to.have.property('location');\r",
							"    pm.expect(body).to.have.property('views');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"№2 Minus sunt dolores id mollitia soluta repellendus deserunt pariatur autem.\",\r\n    \"description\": \"Dignissimos quo aliquid provident molestiae voluptas laudantium voluptatibus. Accusamus blanditiis minus laudantium illum nihil in dolorem illo. Eligendi cum impedit officia qui facilis quam et delectus tenetur. Vitae et praesentium corrupti ad sequi quia. Qui cum a explicabo similique esse. Id voluptas atque autem ut aut neque nisi illum quis.\\n \\rIn ullam sint quod quos doloribus et libero voluptas facere. Minima vero ut. Et quia ut omnis consequatur quasi mollitia repellendus a. Voluptatem laborum consectetur voluptas.\\n \\rVel ut non laborum neque ut et laudantium explicabo fugit. Harum doloribus recusandae sed. Culpa eos voluptate est.\",\r\n    \"annotation\": \"Nisi quod ex modi consequuntur vitae. Ea et iste tempore accusamus sit beatae aspernatur. Saepe iure aut.\",\r\n    \"category\": 1,\r\n    \"eventDate\": \"2025-05-12 05:22:23\",\r\n    \"location\": {\r\n        \"lat\": 86.4161,\r\n        \"lon\": -80.1961\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 800,\r\n    \"requestModeration\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1/events",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта Comment: text, created, updated, ...\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('text');\r",
							"    pm.expect(body).to.have.property('created');\r",
							"    pm.expect(body).to.have.property('updated');\r",
							"    pm.expect(body).to.have.property('eventTitle');\r",
							"    pm.expect(body).to.have.property('authorName');\r",
							"    pm.expect(body).to.have.property('status');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Comment text #2\",\r\n    \"eventId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/1/comments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария - ошибка 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код ошибки 409\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(409);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/admin/comments/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление статуса комментария CANCELING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); \r",
							"pm.test(\"Ответ должен содержать поля объекта Comment: text, created, updated, ...\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body).to.have.property('text');\r",
							"    pm.expect(body).to.have.property('created');\r",
							"    pm.expect(body).to.have.property('updated');\r",
							"    pm.expect(body).to.have.property('eventTitle');\r",
							"    pm.expect(body).to.have.property('authorName');\r",
							"    pm.expect(body).to.have.property('status');\r",
							"}); \r",
							"pm.test(\"Поле text должно быть обновлено и равно: Comment text #2\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.text).to.be.equals('Comment text #2');\r",
							"}); \r",
							"pm.test(\"Поле text должно быть обновлено и равно: Comment text updated\", function() {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.status).to.be.equals('CANCELED');\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"REJECTING\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/admin/comments/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(204);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/admin/comments/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		}
	]
}